namespace inSyca.foundation.integration.biztalk.components
{
    using System;
    using System.IO;
    using System.Text;
    using Microsoft.BizTalk.Message.Interop;
    using Microsoft.BizTalk.Component.Interop;
    using Microsoft.BizTalk.Component;
    using System.Runtime.InteropServices;
    using System.Drawing;
    using Microsoft.BizTalk.Component;

    [ComponentCategory(CategoryTypes.CATID_PipelineComponent)]
    [ComponentCategory(CategoryTypes.CATID_DisassemblingParser)]
    [Guid("01F04E58-7AD8-42EF-A3CB-D939B960E8F9")]
    public class FFAttachmentsExtractor : FFDasmComp, IBaseComponent, IComponentUI, IDisassemblerComponent
    {
        #region IBaseComponent Members
        /// <summary>
        /// Gets Description of the component
        /// </summary>   
        public new string Description
        {
            get
            {
                return "FlatFile Email Attachments Extractor";
            }
        }

        /// <summary>
        /// Gets Name of the component
        /// </summary>   
        public new string Name
        {
            get
            {
                return "FFEmailAttachmentsExtractor";
            }
        }

        /// <summary>
        /// Gets Version of the component
        /// </summary>
        public new string Version
        {
            get
            {
                return "1.0";
            }
        }

        #endregion

        #region IComponentUI members
        /// <summary>
        /// Component icon to use in BizTalk Editor
        /// </summary>      
        public new IntPtr Icon
        {
            get
            {
                return Properties.Resources.cog.Handle;
            }
        }

        #endregion

        /// <summary>
        /// this variable will contain any message generated by the Disassemble method
        /// </summary>
     //   private System.Collections.Queue _msgs = new System.Collections.Queue();

        #region IDisassemblerComponent members

        /// <summary>
        /// Returns messages resulting from the disassemble method execution
        /// </summary>
        /// <param name="pc">the pipeline context</param>
        /// <returns></returns>
        //public new IBaseMessage GetNext(IPipelineContext pc)
        //{
        //    // get the next message from the Queue and return it
        //    IBaseMessage msg = null;
        //    if ((_msgs.Count > 0))
        //    {
        //        msg = ((IBaseMessage)(_msgs.Dequeue()));
        //    }
        //    return msg;
        //}

        /// <summary>
        /// called by the messaging engine when a new message arrives
        /// </summary>
        /// <param name="pc">the pipeline context</param>
        /// <param name="inmsg">the actual message</param>
        public new void Disassemble(Microsoft.BizTalk.Component.Interop.IPipelineContext pc, Microsoft.BizTalk.Message.Interop.IBaseMessage inmsg)
        {
            var partName = string.Empty;
            // we start from index 1 because index zero contains the body of the message
            // which we are not interested
            for (int i = 1; i < inmsg.PartCount; i++)
            {
                IBaseMessagePart currentPart = inmsg.GetPartByIndex(i, out partName);

                Stream currentPartStream = currentPart.GetOriginalDataStream();
                var ms = new MemoryStream();
                IBaseMessage outMsg;
                outMsg = pc.GetMessageFactory().CreateMessage();

                for (int j = 0; j < inmsg.Context.CountProperties; j++)
                {
                    string currentName;
                    string currentNamespace;
                    object obj = inmsg.Context.ReadAt(j, out currentName, out currentNamespace);
                    outMsg.Context.Write(currentName, currentNamespace, obj);

                    if (inmsg.Context.IsPromoted(currentName, currentNamespace))
                    {
                        outMsg.Context.Promote(currentName, currentNamespace, obj);
                    }
                }

                if (IsValidImage(currentPartStream))
                {
                    continue;
                }

                currentPartStream.CopyTo(ms);

                ms.Seek(0, SeekOrigin.Begin);
                outMsg.AddPart("Body", pc.GetMessageFactory().CreateMessagePart(), true);
                outMsg.BodyPart.Data = ms;
                
                //Promote attachment file name
                outMsg.Context.Write("ReceivedFileName", "http://schemas.microsoft.com/BizTalk/2003/file-properties", currentPart.PartProperties.Read("FileName", "http://schemas.microsoft.com/BizTalk/2003/mime-properties"));

                base.Disassemble(pc, outMsg);

                //_msgs.Enqueue(outMsg);
            }
        }
        private bool IsValidImage(Stream ms)
        {
            try
            {
                Image.FromStream(ms);
            }
            catch (Exception)
            {
                return false;
            }
            return true;
        }
        #endregion
    }
}
